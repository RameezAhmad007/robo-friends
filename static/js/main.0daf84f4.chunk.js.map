{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundry.jsx","App.jsx","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","res","i","components_Card","key","SearchBox","value","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","padding","children","ErrorBoundry","_Component","Object","inherits","_super","_createSuper","_this","classCallCheck","this","call","state","hasError","createClass","error","info","setState","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","errorStatus","filteredRobots","filter","robot","toLowerCase","includes","console","log","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","withRouter","connect","searchRobots","requestRobots","dispatch","event","payload","target","fetch","then","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0daf84f4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-s\">\r\n      <img src={`https://robohash.org/${id}`} alt=\"Img Not Found\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  // if(true){\r\n  //   throw new Error('nooooooooooo!')\r\n  // }\r\n  return (\r\n    <div>\r\n      {robots.map((res, i) => {\r\n        return (\r\n          <Card\r\n          key={i}\r\n            id={res.id}\r\n            name={res.name}\r\n            email={res.email}\r\n            // id={robots[i].id}\r\n            // name={robots[i].name}\r\n            // email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({value, searchChange}) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"Search robots\"\r\n        value={value}\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll= (props) =>{\r\n  return(\r\n    <div style={{overflowY: 'auto', height: '440px', padding: '20px 0'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from \"react\";\r\n\r\nexport class ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n    // console.log('Error : ', error)\r\n    // console.log('Info : ', info)\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.hasError ? (\r\n          <h1>Oooops! SomeThing Wrong in Your Code.</h1>\r\n        ) : (\r\n          this.props.children\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { withRouter } from \"react-router-dom\";\nimport \"tachyons\";\nimport { connect } from \"react-redux\";\nimport CardList from \"./components/CardList\";\nimport SearchBox from \"./components/SearchBox\";\nimport Scroll from \"./components/Scroll\";\nimport ErrorBoundry from \"./components/ErrorBoundry\";\nimport { onSearchChange, onRequestRobots } from \"./actions\";\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    isPending: state.requestRobots.isPending,\n    robots: state.requestRobots.robots,\n    error: state.requestRobots.error,\n    errorStatus: state.requestRobots.errorStatus\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(onSearchChange(event.target.value)),\n    onRequestRobots: () => onRequestRobots(dispatch)\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n  render() {\n    const {\n      searchField,\n      onSearchChange,\n      robots,\n      isPending,\n      errorStatus\n    } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    console.log(\"Error Status : \", errorStatus);\n\n    return (\n      <div className=\"App tc\">\n        {isPending ? (\n          <h1>Loading</h1>\n        ) : errorStatus ? (\n          <h1>Error</h1>\n        ) : (\n          <div>\n            <h1 className=\"f1\">RoboFriends</h1>\n            <SearchBox searchChange={onSearchChange} value={searchField} />\n            <Scroll>\n              <ErrorBoundry>\n                <CardList robots={filteredRobots} />\n              </ErrorBoundry>\n            </Scroll>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOT_PENDING,\r\n  REQUEST_ROBOT_SUCCESS,\r\n  REQUEST_ROBOT_FAILED\r\n} from \"./constants\";\r\n\r\n// export const onInputChange = e => {\r\n//   return {\r\n//     type: \"INPUT_CHANGE\",\r\n//     payload: e.target\r\n//   };\r\n// };\r\n\r\n// export const onSubmit = e => {\r\n//   return {\r\n//     type: 'INPUT_SUBMIT',\r\n//     payload: e,\r\n//   }\r\n// }\r\n\r\nexport const onSearchChange = text => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\nexport const onRequestRobots = dispatch => {\r\n  dispatch({ type: REQUEST_ROBOT_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(res => res.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOT_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOT_FAILED, payload: error }));\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOT_PENDING = 'REQUEST_ROBOT_PENDING';\r\nexport const REQUEST_ROBOT_SUCCESS = 'REQUEST_ROBOT_SUCCESS';\r\nexport const REQUEST_ROBOT_FAILED = 'REQUEST_ROBOT_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// const initialState = {\r\n//   fname: \"\",\r\n//   lname: \"\",\r\n//   email: \"\",\r\n//   password: \"\",\r\n//   confirm_password: \"\"\r\n// };\r\n\r\n// export const reducers = (state = initialState, action) => {\r\n//   switch (action.type) {\r\n//     case \"INPUT_CHANGE\":\r\n//       console.log(\"update State : \", state);\r\n//       return {\r\n//         ...state,\r\n//         [action.payload.name]: action.payload.value\r\n//       };\r\n//     case \"INPUT_SUBMIT\":\r\n//       action.payload.preventDefault();\r\n\r\n//       let dataToSubmit = {\r\n//         email: state.email,\r\n//         password: state.password\r\n//       };\r\n//       console.log(\"Data To Submit : \", dataToSubmit);\r\n//       return {\r\n//         ...state,\r\n//         submit_data: dataToSubmit\r\n//       };\r\n//     default:\r\n//       return {\r\n//         ...state\r\n//       };\r\n//   }\r\n// };\r\n\r\nimport {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOT_PENDING,\r\n  REQUEST_ROBOT_SUCCESS,\r\n  REQUEST_ROBOT_FAILED\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\"\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    // return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\",\r\n  errorStatus: false\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOT_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOT_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false\r\n      });\r\n    case REQUEST_ROBOT_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        errorStatus: true,\r\n        isPending: false\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport { Provider } from \"react-redux\";\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}